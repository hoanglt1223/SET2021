@startuml
class Spot{
  + piece: Piece
  + x: Number
  + y: Number
  + canMove: Boolean
  + void setCanMove(newCanMove: boolean)
}

class Board{
  +boxes: Spot[][]
  +currentSpotSelected: Spot

  +void initialize()
  +void renderBoard()
  +Spot getSpotFromBoxes(x: number, y: number)
  +void setCurrentSpotSelected(spot:Spot)
  +void setPieceForSpot(pice:Piece, x: number, y: number)

}

class Piece{
  + name: String
  + imgUrl: String
  + isWhite: Boolean
  + isKilled: Boolean
  + Boolean canMove(Board board,Spot start, Spot end)
  + {x:number, y:number}[] getSpotsCanMove(startX: number, startY: number)
}

class Move{
  + player: Player
  + start: Spot
  + end: Spot
  + pieceMoved: Piece
  + pieceKilled: Piece
}

class Game{
  + status: String
  + board: Board
  + players: Player[]
  + currentTurn: Player
  + moves: Move[]

  + void initialize()
  + void startGame()
  + void endGame()
  + void pauseGame()
  + void resetGame()
  + void playerMove(player: Player, startX: Number, startY: Number, endX: Number, endY: Number)
  + void goToPreviousStep(player: Player)
}

class Player{
  + name: String
  + isWhiteSide: Boolean
}

class HumanPlayer{
  + score: Number
  + void calculatingScore()
}

class ComputerPlayer{}


class King{
  + isFirstStep: Boolean
  + isChecked: Boolean
  + void setIsFirstStep(newIsFirstStep: Boolean)
  + void setIsChecked(newIsFirstStep: Boolean)
  + void handleCastle(board: Board)
}
class Bishop{}
class Knight{}
class Pawn{
  + isFirstStep: Boolean
  + void setIsFirstStep(newIsFirstStep: Boolean)
  + void handlePromote(board: Board)
}
class Queen{}
class Rook{
  + isFirstStep: Boolean
  + void setIsFirstStep(newIsFirstStep: Boolean)
  + void handleCastle(board: Board)
}





Piece <|-- King
Piece <|-- Bishop
Piece <|-- Knight
Piece <|-- Pawn
Piece <|-- Queen
Piece <|-- Rook

Player <|-- HumanPlayer
Player <|-- ComputerPlayer

@enduml
